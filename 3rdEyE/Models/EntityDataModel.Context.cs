//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _3rdEyE.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EntityDataModel : DbContext
    {
        public EntityDataModel()
            : base("name=EntityDataModel")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Accident> Accidents { get; set; }
        public virtual DbSet<AccidentDocument> AccidentDocuments { get; set; }
        public virtual DbSet<AccidentExpense> AccidentExpenses { get; set; }
        public virtual DbSet<AlertEmail> AlertEmails { get; set; }
        public virtual DbSet<AlertEmailAttachedDepo> AlertEmailAttachedDepoes { get; set; }
        public virtual DbSet<AlertEmailLog> AlertEmailLogs { get; set; }
        public virtual DbSet<AppAction> AppActions { get; set; }
        public virtual DbSet<AppErrorLog> AppErrorLogs { get; set; }
        public virtual DbSet<AppMenu> AppMenus { get; set; }
        public virtual DbSet<AppModule> AppModules { get; set; }
        public virtual DbSet<AppModule_AppAction> AppModule_AppAction { get; set; }
        public virtual DbSet<AppPermission> AppPermissions { get; set; }
        public virtual DbSet<AppRole> AppRoles { get; set; }
        public virtual DbSet<AppRole_AppMenu> AppRole_AppMenu { get; set; }
        public virtual DbSet<AppRole_AppPermission> AppRole_AppPermission { get; set; }
        public virtual DbSet<AppRole_AppSubMenu> AppRole_AppSubMenu { get; set; }
        public virtual DbSet<AppSetting> AppSettings { get; set; }
        public virtual DbSet<AppSubMenu> AppSubMenus { get; set; }
        public virtual DbSet<AppUser> AppUsers { get; set; }
        public virtual DbSet<AppUser_AppModule> AppUser_AppModule { get; set; }
        public virtual DbSet<AppUserAccessibleDepo> AppUserAccessibleDepoes { get; set; }
        public virtual DbSet<AppUserLoginHistory> AppUserLoginHistories { get; set; }
        public virtual DbSet<AppUserSurpervisedContructualCompany> AppUserSurpervisedContructualCompanies { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<ContructualRequisition> ContructualRequisitions { get; set; }
        public virtual DbSet<ContructualRequisitionCompany> ContructualRequisitionCompanies { get; set; }
        public virtual DbSet<ContructualRequisitionDetail> ContructualRequisitionDetails { get; set; }
        public virtual DbSet<ContructualRequisitionDetailEntry> ContructualRequisitionDetailEntries { get; set; }
        public virtual DbSet<DairyVehicle> DairyVehicles { get; set; }
        public virtual DbSet<Dealer> Dealers { get; set; }
        public virtual DbSet<Depo> Depoes { get; set; }
        public virtual DbSet<DepoBorder> DepoBorders { get; set; }
        public virtual DbSet<DepoGroup> DepoGroups { get; set; }
        public virtual DbSet<DeviceData> DeviceDatas { get; set; }
        public virtual DbSet<DisplayMessage> DisplayMessages { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventDocument> EventDocuments { get; set; }
        public virtual DbSet<EventType> EventTypes { get; set; }
        public virtual DbSet<FinancingCompany> FinancingCompanies { get; set; }
        public virtual DbSet<GPS_DeviceChangeLog> GPS_DeviceChangeLog { get; set; }
        public virtual DbSet<GPS_DeviceExisting> GPS_DeviceExisting { get; set; }
        public virtual DbSet<GroupOfCompany> GroupOfCompanies { get; set; }
        public virtual DbSet<Helper> Helpers { get; set; }
        public virtual DbSet<HiredVehicleDriver> HiredVehicleDrivers { get; set; }
        public virtual DbSet<IndividualRequisition> IndividualRequisitions { get; set; }
        public virtual DbSet<IndividualRequisitionBidding> IndividualRequisitionBiddings { get; set; }
        public virtual DbSet<InstantRequisition> InstantRequisitions { get; set; }
        public virtual DbSet<InterCompanyRequisition> InterCompanyRequisitions { get; set; }
        public virtual DbSet<InterCompanyRequisition_ExternalTroller> InterCompanyRequisition_ExternalTroller { get; set; }
        public virtual DbSet<InterCompanyRequisition_ExternalVehicle> InterCompanyRequisition_ExternalVehicle { get; set; }
        public virtual DbSet<InterCompanyRequisition_InternalVehicle> InterCompanyRequisition_InternalVehicle { get; set; }
        public virtual DbSet<InterCompanyRequisitionBidding> InterCompanyRequisitionBiddings { get; set; }
        public virtual DbSet<InterCompanyRequisitionLocation> InterCompanyRequisitionLocations { get; set; }
        public virtual DbSet<KPLChangeLog> KPLChangeLogs { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LocationToLocationMapping> LocationToLocationMappings { get; set; }
        public virtual DbSet<LocationWiseGP> LocationWiseGPs { get; set; }
        public virtual DbSet<MapLocation> MapLocations { get; set; }
        public virtual DbSet<MobileMenu> MobileMenus { get; set; }
        public virtual DbSet<MobileRole> MobileRoles { get; set; }
        public virtual DbSet<MobileRole_MobileMenu> MobileRole_MobileMenu { get; set; }
        public virtual DbSet<MonthlyBillEntry> MonthlyBillEntries { get; set; }
        public virtual DbSet<PoliceCase> PoliceCases { get; set; }
        public virtual DbSet<PoliceCase_PoliceCaseLaw> PoliceCase_PoliceCaseLaw { get; set; }
        public virtual DbSet<PoliceCaseDocument> PoliceCaseDocuments { get; set; }
        public virtual DbSet<PoliceCaseLaw> PoliceCaseLaws { get; set; }
        public virtual DbSet<PRG_Type> PRG_Type { get; set; }
        public virtual DbSet<ReadyReport> ReadyReports { get; set; }
        public virtual DbSet<Report_ConsolidatedRport> Report_ConsolidatedRport { get; set; }
        public virtual DbSet<Report_TemperatureReport> Report_TemperatureReport { get; set; }
        public virtual DbSet<Report_TemperatureReport_Helper> Report_TemperatureReport_Helper { get; set; }
        public virtual DbSet<Report_VehicleConsolidatedReport> Report_VehicleConsolidatedReport { get; set; }
        public virtual DbSet<Report_VehicleHaltReadyReport_Helper> Report_VehicleHaltReadyReport_Helper { get; set; }
        public virtual DbSet<Report_VehicleHaltReadyReport_Helper_Helper> Report_VehicleHaltReadyReport_Helper_Helper { get; set; }
        public virtual DbSet<Report_VehicleHaltReport> Report_VehicleHaltReport { get; set; }
        public virtual DbSet<Report_VehicleHaltReport_Helper> Report_VehicleHaltReport_Helper { get; set; }
        public virtual DbSet<Report_VehicleHistory> Report_VehicleHistory { get; set; }
        public virtual DbSet<Report_VehicleHistoryDetail> Report_VehicleHistoryDetail { get; set; }
        public virtual DbSet<Report_VehicleInOutHistoryDetail> Report_VehicleInOutHistoryDetail { get; set; }
        public virtual DbSet<Report_VehicleOutOverStay> Report_VehicleOutOverStay { get; set; }
        public virtual DbSet<Requisition> Requisitions { get; set; }
        public virtual DbSet<RequisitionAgentNotification> RequisitionAgentNotifications { get; set; }
        public virtual DbSet<RequisitionAgentProposedDepo> RequisitionAgentProposedDepoes { get; set; }
        public virtual DbSet<RequisitionBusinessUnit> RequisitionBusinessUnits { get; set; }
        public virtual DbSet<RequisitionProductType> RequisitionProductTypes { get; set; }
        public virtual DbSet<RequisitionTrip> RequisitionTrips { get; set; }
        public virtual DbSet<RequisitionTrip_Finished> RequisitionTrip_Finished { get; set; }
        public virtual DbSet<RequisitionVehicleType> RequisitionVehicleTypes { get; set; }
        public virtual DbSet<RFID_AutoDistSuggession> RFID_AutoDistSuggession { get; set; }
        public virtual DbSet<RFID_AutoLetterSuggession> RFID_AutoLetterSuggession { get; set; }
        public virtual DbSet<RFID_Entry> RFID_Entry { get; set; }
        public virtual DbSet<RFID_EntryLog> RFID_EntryLog { get; set; }
        public virtual DbSet<RouteChart> RouteCharts { get; set; }
        public virtual DbSet<ServiceCall> ServiceCalls { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TempMail> TempMails { get; set; }
        public virtual DbSet<TemporaryVehicle> TemporaryVehicles { get; set; }
        public virtual DbSet<TestRfidData> TestRfidDatas { get; set; }
        public virtual DbSet<TransportCompany> TransportCompanies { get; set; }
        public virtual DbSet<TripExpense> TripExpenses { get; set; }
        public virtual DbSet<Upazila> Upazilas { get; set; }
        public virtual DbSet<UserDesignation> UserDesignations { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<VehicleBrand> VehicleBrands { get; set; }
        public virtual DbSet<VehicleInOutManual> VehicleInOutManuals { get; set; }
        public virtual DbSet<VehicleInOutManualReason> VehicleInOutManualReasons { get; set; }
        public virtual DbSet<VehicleInOutManualTypesOfProduct> VehicleInOutManualTypesOfProducts { get; set; }
        public virtual DbSet<VehicleModel> VehicleModels { get; set; }
        public virtual DbSet<VehicleSharing> VehicleSharings { get; set; }
        public virtual DbSet<VehicleSharingBidding> VehicleSharingBiddings { get; set; }
        public virtual DbSet<VehicleSharingDemand> VehicleSharingDemands { get; set; }
        public virtual DbSet<VehicleSharingExternalTrip> VehicleSharingExternalTrips { get; set; }
        public virtual DbSet<VehicleSharingInternalTrip> VehicleSharingInternalTrips { get; set; }
        public virtual DbSet<VehicleSharingInternalTripAdjustment> VehicleSharingInternalTripAdjustments { get; set; }
        public virtual DbSet<VehicleTracking> VehicleTrackings { get; set; }
        public virtual DbSet<VehicleTrackingInformation> VehicleTrackingInformations { get; set; }
        public virtual DbSet<VehicleTrip> VehicleTrips { get; set; }
        public virtual DbSet<VehicleSharingAgentMapping> VehicleSharingAgentMappings { get; set; }
        public virtual DbSet<SillyView> SillyViews { get; set; }
        public virtual DbSet<view_StayReportDaily> view_StayReportDaily { get; set; }
    
        public virtual ObjectResult<string> f_PushDeviceData_Update_Insert(Nullable<System.Guid> pK_Vehicle, string gpsIMEINumber, Nullable<System.DateTime> updateTime, string latitude, string longitude, string altitude, string engineStatus, string course, string temperature, string fuel, string speed, string distance, string eventCode, string status_PostionValidity, Nullable<int> status_SateliteCount, Nullable<int> status_GSMSignalStrength, Nullable<int> remainingCash, Nullable<bool> isEngineStatusChanged)
        {
            var pK_VehicleParameter = pK_Vehicle.HasValue ?
                new ObjectParameter("PK_Vehicle", pK_Vehicle) :
                new ObjectParameter("PK_Vehicle", typeof(System.Guid));
    
            var gpsIMEINumberParameter = gpsIMEINumber != null ?
                new ObjectParameter("GpsIMEINumber", gpsIMEINumber) :
                new ObjectParameter("GpsIMEINumber", typeof(string));
    
            var updateTimeParameter = updateTime.HasValue ?
                new ObjectParameter("UpdateTime", updateTime) :
                new ObjectParameter("UpdateTime", typeof(System.DateTime));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var altitudeParameter = altitude != null ?
                new ObjectParameter("Altitude", altitude) :
                new ObjectParameter("Altitude", typeof(string));
    
            var engineStatusParameter = engineStatus != null ?
                new ObjectParameter("EngineStatus", engineStatus) :
                new ObjectParameter("EngineStatus", typeof(string));
    
            var courseParameter = course != null ?
                new ObjectParameter("Course", course) :
                new ObjectParameter("Course", typeof(string));
    
            var temperatureParameter = temperature != null ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(string));
    
            var fuelParameter = fuel != null ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(string));
    
            var speedParameter = speed != null ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(string));
    
            var distanceParameter = distance != null ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(string));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var status_PostionValidityParameter = status_PostionValidity != null ?
                new ObjectParameter("Status_PostionValidity", status_PostionValidity) :
                new ObjectParameter("Status_PostionValidity", typeof(string));
    
            var status_SateliteCountParameter = status_SateliteCount.HasValue ?
                new ObjectParameter("Status_SateliteCount", status_SateliteCount) :
                new ObjectParameter("Status_SateliteCount", typeof(int));
    
            var status_GSMSignalStrengthParameter = status_GSMSignalStrength.HasValue ?
                new ObjectParameter("Status_GSMSignalStrength", status_GSMSignalStrength) :
                new ObjectParameter("Status_GSMSignalStrength", typeof(int));
    
            var remainingCashParameter = remainingCash.HasValue ?
                new ObjectParameter("RemainingCash", remainingCash) :
                new ObjectParameter("RemainingCash", typeof(int));
    
            var isEngineStatusChangedParameter = isEngineStatusChanged.HasValue ?
                new ObjectParameter("IsEngineStatusChanged", isEngineStatusChanged) :
                new ObjectParameter("IsEngineStatusChanged", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("f_PushDeviceData_Update_Insert", pK_VehicleParameter, gpsIMEINumberParameter, updateTimeParameter, latitudeParameter, longitudeParameter, altitudeParameter, engineStatusParameter, courseParameter, temperatureParameter, fuelParameter, speedParameter, distanceParameter, eventCodeParameter, status_PostionValidityParameter, status_SateliteCountParameter, status_GSMSignalStrengthParameter, remainingCashParameter, isEngineStatusChangedParameter);
        }
    
        public virtual ObjectResult<string> CleanDeviceData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CleanDeviceData");
        }
    
        public virtual int DataBaseBackup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DataBaseBackup");
        }
    
        public virtual int DeleteCoreData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCoreData");
        }
    
        public virtual int DeleteDbData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDbData");
        }
    
        public virtual int GenerateReport_GetVehicleHaltTime(string fK_Vehicle, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endingDate)
        {
            var fK_VehicleParameter = fK_Vehicle != null ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(string));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("startingDate", startingDate) :
                new ObjectParameter("startingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("endingDate", endingDate) :
                new ObjectParameter("endingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateReport_GetVehicleHaltTime", fK_VehicleParameter, startingDateParameter, endingDateParameter);
        }
    
        public virtual int GenerateReport_GetVehicleHaltTime_Helper(string fK_Vehicle, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endingDate)
        {
            var fK_VehicleParameter = fK_Vehicle != null ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(string));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("startingDate", startingDate) :
                new ObjectParameter("startingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("endingDate", endingDate) :
                new ObjectParameter("endingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateReport_GetVehicleHaltTime_Helper", fK_VehicleParameter, startingDateParameter, endingDateParameter);
        }
    
        public virtual int GenerateReport_GetVehicleHaltTime_Helper_Helper(string fK_Vehicle, Nullable<System.DateTime> startingDate)
        {
            var fK_VehicleParameter = fK_Vehicle != null ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(string));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateReport_GetVehicleHaltTime_Helper_Helper", fK_VehicleParameter, startingDateParameter);
        }
    
        public virtual ObjectResult<string> MoveDeviceData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("MoveDeviceData");
        }
    
        public virtual ObjectResult<string> PushDeviceData__Insert(Nullable<System.Guid> pK_Vehicle, string gpsIMEINumber, Nullable<System.DateTime> updateTime, string latitude, string longitude, string altitude, string engineStatus, string course, string temperature, string fuel, string speed, string distance, string eventCode, string status_PostionValidity, Nullable<int> status_SateliteCount, Nullable<int> status_GSMSignalStrength, Nullable<int> remainingCash)
        {
            var pK_VehicleParameter = pK_Vehicle.HasValue ?
                new ObjectParameter("PK_Vehicle", pK_Vehicle) :
                new ObjectParameter("PK_Vehicle", typeof(System.Guid));
    
            var gpsIMEINumberParameter = gpsIMEINumber != null ?
                new ObjectParameter("GpsIMEINumber", gpsIMEINumber) :
                new ObjectParameter("GpsIMEINumber", typeof(string));
    
            var updateTimeParameter = updateTime.HasValue ?
                new ObjectParameter("UpdateTime", updateTime) :
                new ObjectParameter("UpdateTime", typeof(System.DateTime));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var altitudeParameter = altitude != null ?
                new ObjectParameter("Altitude", altitude) :
                new ObjectParameter("Altitude", typeof(string));
    
            var engineStatusParameter = engineStatus != null ?
                new ObjectParameter("EngineStatus", engineStatus) :
                new ObjectParameter("EngineStatus", typeof(string));
    
            var courseParameter = course != null ?
                new ObjectParameter("Course", course) :
                new ObjectParameter("Course", typeof(string));
    
            var temperatureParameter = temperature != null ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(string));
    
            var fuelParameter = fuel != null ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(string));
    
            var speedParameter = speed != null ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(string));
    
            var distanceParameter = distance != null ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(string));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var status_PostionValidityParameter = status_PostionValidity != null ?
                new ObjectParameter("Status_PostionValidity", status_PostionValidity) :
                new ObjectParameter("Status_PostionValidity", typeof(string));
    
            var status_SateliteCountParameter = status_SateliteCount.HasValue ?
                new ObjectParameter("Status_SateliteCount", status_SateliteCount) :
                new ObjectParameter("Status_SateliteCount", typeof(int));
    
            var status_GSMSignalStrengthParameter = status_GSMSignalStrength.HasValue ?
                new ObjectParameter("Status_GSMSignalStrength", status_GSMSignalStrength) :
                new ObjectParameter("Status_GSMSignalStrength", typeof(int));
    
            var remainingCashParameter = remainingCash.HasValue ?
                new ObjectParameter("RemainingCash", remainingCash) :
                new ObjectParameter("RemainingCash", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PushDeviceData__Insert", pK_VehicleParameter, gpsIMEINumberParameter, updateTimeParameter, latitudeParameter, longitudeParameter, altitudeParameter, engineStatusParameter, courseParameter, temperatureParameter, fuelParameter, speedParameter, distanceParameter, eventCodeParameter, status_PostionValidityParameter, status_SateliteCountParameter, status_GSMSignalStrengthParameter, remainingCashParameter);
        }
    
        public virtual ObjectResult<string> PushDeviceData_Insert_Insert(string gpsIMEINumber, Nullable<System.DateTime> updateTime, string latitude, string longitude, string altitude, string engineStatus, string course, string temperature, string fuel, string speed, string distance, string eventCode, string status_PostionValidity, Nullable<int> status_SateliteCount, Nullable<int> status_GSMSignalStrength, Nullable<int> remainingCash)
        {
            var gpsIMEINumberParameter = gpsIMEINumber != null ?
                new ObjectParameter("GpsIMEINumber", gpsIMEINumber) :
                new ObjectParameter("GpsIMEINumber", typeof(string));
    
            var updateTimeParameter = updateTime.HasValue ?
                new ObjectParameter("UpdateTime", updateTime) :
                new ObjectParameter("UpdateTime", typeof(System.DateTime));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var altitudeParameter = altitude != null ?
                new ObjectParameter("Altitude", altitude) :
                new ObjectParameter("Altitude", typeof(string));
    
            var engineStatusParameter = engineStatus != null ?
                new ObjectParameter("EngineStatus", engineStatus) :
                new ObjectParameter("EngineStatus", typeof(string));
    
            var courseParameter = course != null ?
                new ObjectParameter("Course", course) :
                new ObjectParameter("Course", typeof(string));
    
            var temperatureParameter = temperature != null ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(string));
    
            var fuelParameter = fuel != null ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(string));
    
            var speedParameter = speed != null ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(string));
    
            var distanceParameter = distance != null ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(string));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var status_PostionValidityParameter = status_PostionValidity != null ?
                new ObjectParameter("Status_PostionValidity", status_PostionValidity) :
                new ObjectParameter("Status_PostionValidity", typeof(string));
    
            var status_SateliteCountParameter = status_SateliteCount.HasValue ?
                new ObjectParameter("Status_SateliteCount", status_SateliteCount) :
                new ObjectParameter("Status_SateliteCount", typeof(int));
    
            var status_GSMSignalStrengthParameter = status_GSMSignalStrength.HasValue ?
                new ObjectParameter("Status_GSMSignalStrength", status_GSMSignalStrength) :
                new ObjectParameter("Status_GSMSignalStrength", typeof(int));
    
            var remainingCashParameter = remainingCash.HasValue ?
                new ObjectParameter("RemainingCash", remainingCash) :
                new ObjectParameter("RemainingCash", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PushDeviceData_Insert_Insert", gpsIMEINumberParameter, updateTimeParameter, latitudeParameter, longitudeParameter, altitudeParameter, engineStatusParameter, courseParameter, temperatureParameter, fuelParameter, speedParameter, distanceParameter, eventCodeParameter, status_PostionValidityParameter, status_SateliteCountParameter, status_GSMSignalStrengthParameter, remainingCashParameter);
        }
    
        public virtual ObjectResult<string> PushDeviceData_Update_Insert(Nullable<System.Guid> pK_Vehicle, string gpsIMEINumber, Nullable<System.DateTime> updateTime, string latitude, string longitude, string altitude, string engineStatus, string course, string temperature, string fuel, string speed, string distance, string eventCode, string status_PostionValidity, Nullable<int> status_SateliteCount, Nullable<int> status_GSMSignalStrength, Nullable<int> remainingCash)
        {
            var pK_VehicleParameter = pK_Vehicle.HasValue ?
                new ObjectParameter("PK_Vehicle", pK_Vehicle) :
                new ObjectParameter("PK_Vehicle", typeof(System.Guid));
    
            var gpsIMEINumberParameter = gpsIMEINumber != null ?
                new ObjectParameter("GpsIMEINumber", gpsIMEINumber) :
                new ObjectParameter("GpsIMEINumber", typeof(string));
    
            var updateTimeParameter = updateTime.HasValue ?
                new ObjectParameter("UpdateTime", updateTime) :
                new ObjectParameter("UpdateTime", typeof(System.DateTime));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var altitudeParameter = altitude != null ?
                new ObjectParameter("Altitude", altitude) :
                new ObjectParameter("Altitude", typeof(string));
    
            var engineStatusParameter = engineStatus != null ?
                new ObjectParameter("EngineStatus", engineStatus) :
                new ObjectParameter("EngineStatus", typeof(string));
    
            var courseParameter = course != null ?
                new ObjectParameter("Course", course) :
                new ObjectParameter("Course", typeof(string));
    
            var temperatureParameter = temperature != null ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(string));
    
            var fuelParameter = fuel != null ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(string));
    
            var speedParameter = speed != null ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(string));
    
            var distanceParameter = distance != null ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(string));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var status_PostionValidityParameter = status_PostionValidity != null ?
                new ObjectParameter("Status_PostionValidity", status_PostionValidity) :
                new ObjectParameter("Status_PostionValidity", typeof(string));
    
            var status_SateliteCountParameter = status_SateliteCount.HasValue ?
                new ObjectParameter("Status_SateliteCount", status_SateliteCount) :
                new ObjectParameter("Status_SateliteCount", typeof(int));
    
            var status_GSMSignalStrengthParameter = status_GSMSignalStrength.HasValue ?
                new ObjectParameter("Status_GSMSignalStrength", status_GSMSignalStrength) :
                new ObjectParameter("Status_GSMSignalStrength", typeof(int));
    
            var remainingCashParameter = remainingCash.HasValue ?
                new ObjectParameter("RemainingCash", remainingCash) :
                new ObjectParameter("RemainingCash", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PushDeviceData_Update_Insert", pK_VehicleParameter, gpsIMEINumberParameter, updateTimeParameter, latitudeParameter, longitudeParameter, altitudeParameter, engineStatusParameter, courseParameter, temperatureParameter, fuelParameter, speedParameter, distanceParameter, eventCodeParameter, status_PostionValidityParameter, status_SateliteCountParameter, status_GSMSignalStrengthParameter, remainingCashParameter);
        }
    
        public virtual ObjectResult<string> PushDeviceData_UpdateTime(Nullable<System.Guid> pK_Vehicle, Nullable<System.DateTime> updateTime)
        {
            var pK_VehicleParameter = pK_Vehicle.HasValue ?
                new ObjectParameter("PK_Vehicle", pK_Vehicle) :
                new ObjectParameter("PK_Vehicle", typeof(System.Guid));
    
            var updateTimeParameter = updateTime.HasValue ?
                new ObjectParameter("UpdateTime", updateTime) :
                new ObjectParameter("UpdateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PushDeviceData_UpdateTime", pK_VehicleParameter, updateTimeParameter);
        }
    
        public virtual ObjectResult<Report_GetAccessibleEventList_InDateRange_Result> Report_GetAccessibleEventList_InDateRange(Nullable<System.Guid> fK_Vehicle)
        {
            var fK_VehicleParameter = fK_Vehicle.HasValue ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetAccessibleEventList_InDateRange_Result>("Report_GetAccessibleEventList_InDateRange", fK_VehicleParameter);
        }
    
        public virtual ObjectResult<Report_GetTemperatureHistory_Result> Report_GetTemperatureHistory(string uSER_KEY, Nullable<System.Guid> fK_Vehicle, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endingDate, Nullable<int> intervalMinute)
        {
            var uSER_KEYParameter = uSER_KEY != null ?
                new ObjectParameter("USER_KEY", uSER_KEY) :
                new ObjectParameter("USER_KEY", typeof(string));
    
            var fK_VehicleParameter = fK_Vehicle.HasValue ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(System.Guid));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var intervalMinuteParameter = intervalMinute.HasValue ?
                new ObjectParameter("IntervalMinute", intervalMinute) :
                new ObjectParameter("IntervalMinute", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetTemperatureHistory_Result>("Report_GetTemperatureHistory", uSER_KEYParameter, fK_VehicleParameter, startingDateParameter, endingDateParameter, intervalMinuteParameter);
        }
    
        public virtual ObjectResult<Report_GetTemperatureHistory_RE_Result> Report_GetTemperatureHistory_RE(string uSER_KEY, Nullable<System.Guid> fK_Vehicle, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endingDate, Nullable<int> intervalMinute)
        {
            var uSER_KEYParameter = uSER_KEY != null ?
                new ObjectParameter("USER_KEY", uSER_KEY) :
                new ObjectParameter("USER_KEY", typeof(string));
    
            var fK_VehicleParameter = fK_Vehicle.HasValue ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(System.Guid));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var intervalMinuteParameter = intervalMinute.HasValue ?
                new ObjectParameter("IntervalMinute", intervalMinute) :
                new ObjectParameter("IntervalMinute", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetTemperatureHistory_RE_Result>("Report_GetTemperatureHistory_RE", uSER_KEYParameter, fK_VehicleParameter, startingDateParameter, endingDateParameter, intervalMinuteParameter);
        }
    
        public virtual ObjectResult<Report_GetVehicleConsolidatedReport_Result> Report_GetVehicleConsolidatedReport(string uSER_KEY, Nullable<System.Guid> fK_Vehicle, Nullable<System.DateTime> starTingDate)
        {
            var uSER_KEYParameter = uSER_KEY != null ?
                new ObjectParameter("USER_KEY", uSER_KEY) :
                new ObjectParameter("USER_KEY", typeof(string));
    
            var fK_VehicleParameter = fK_Vehicle.HasValue ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(System.Guid));
    
            var starTingDateParameter = starTingDate.HasValue ?
                new ObjectParameter("StarTingDate", starTingDate) :
                new ObjectParameter("StarTingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetVehicleConsolidatedReport_Result>("Report_GetVehicleConsolidatedReport", uSER_KEYParameter, fK_VehicleParameter, starTingDateParameter);
        }
    
        public virtual ObjectResult<Report_GetVehicleConsolidatedReport_ReadyReport_Result> Report_GetVehicleConsolidatedReport_ReadyReport(Nullable<System.Guid> fK_Vehicle, Nullable<System.DateTime> startingDate)
        {
            var fK_VehicleParameter = fK_Vehicle.HasValue ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(System.Guid));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetVehicleConsolidatedReport_ReadyReport_Result>("Report_GetVehicleConsolidatedReport_ReadyReport", fK_VehicleParameter, startingDateParameter);
        }
    
        public virtual ObjectResult<Report_GetVehicleHaltTime_Result> Report_GetVehicleHaltTime(string uSER_KEY, Nullable<System.Guid> fK_Vehicle, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endingDate, Nullable<int> mininumMinuteDealy)
        {
            var uSER_KEYParameter = uSER_KEY != null ?
                new ObjectParameter("USER_KEY", uSER_KEY) :
                new ObjectParameter("USER_KEY", typeof(string));
    
            var fK_VehicleParameter = fK_Vehicle.HasValue ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(System.Guid));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var mininumMinuteDealyParameter = mininumMinuteDealy.HasValue ?
                new ObjectParameter("MininumMinuteDealy", mininumMinuteDealy) :
                new ObjectParameter("MininumMinuteDealy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetVehicleHaltTime_Result>("Report_GetVehicleHaltTime", uSER_KEYParameter, fK_VehicleParameter, startingDateParameter, endingDateParameter, mininumMinuteDealyParameter);
        }
    
        public virtual ObjectResult<Report_GetVehicleHaltTime_ReadyReport_Result> Report_GetVehicleHaltTime_ReadyReport(Nullable<System.Guid> fK_Vehicle, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endingDate, Nullable<int> mininumMinuteDealy)
        {
            var fK_VehicleParameter = fK_Vehicle.HasValue ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(System.Guid));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var mininumMinuteDealyParameter = mininumMinuteDealy.HasValue ?
                new ObjectParameter("MininumMinuteDealy", mininumMinuteDealy) :
                new ObjectParameter("MininumMinuteDealy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetVehicleHaltTime_ReadyReport_Result>("Report_GetVehicleHaltTime_ReadyReport", fK_VehicleParameter, startingDateParameter, endingDateParameter, mininumMinuteDealyParameter);
        }
    
        public virtual ObjectResult<Report_GetVehicleHistory_Result> Report_GetVehicleHistory(string uSER_KEY, Nullable<System.Guid> fK_Vehicle, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endingDate, Nullable<int> timeLapMinute)
        {
            var uSER_KEYParameter = uSER_KEY != null ?
                new ObjectParameter("USER_KEY", uSER_KEY) :
                new ObjectParameter("USER_KEY", typeof(string));
    
            var fK_VehicleParameter = fK_Vehicle.HasValue ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(System.Guid));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var timeLapMinuteParameter = timeLapMinute.HasValue ?
                new ObjectParameter("TimeLapMinute", timeLapMinute) :
                new ObjectParameter("TimeLapMinute", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetVehicleHistory_Result>("Report_GetVehicleHistory", uSER_KEYParameter, fK_VehicleParameter, startingDateParameter, endingDateParameter, timeLapMinuteParameter);
        }
    
        public virtual ObjectResult<Report_GetVehicleHistoryDetail_Result> Report_GetVehicleHistoryDetail(Nullable<System.Guid> uSER_KEY, Nullable<System.Guid> fK_Vehicle, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endingDate)
        {
            var uSER_KEYParameter = uSER_KEY.HasValue ?
                new ObjectParameter("USER_KEY", uSER_KEY) :
                new ObjectParameter("USER_KEY", typeof(System.Guid));
    
            var fK_VehicleParameter = fK_Vehicle.HasValue ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(System.Guid));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetVehicleHistoryDetail_Result>("Report_GetVehicleHistoryDetail", uSER_KEYParameter, fK_VehicleParameter, startingDateParameter, endingDateParameter);
        }
    
        public virtual ObjectResult<Report_GetVehicleInOutHistoryDetail_Result> Report_GetVehicleInOutHistoryDetail(Nullable<System.Guid> uSER_KEY, Nullable<System.Guid> fK_Vehicle, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endingDate)
        {
            var uSER_KEYParameter = uSER_KEY.HasValue ?
                new ObjectParameter("USER_KEY", uSER_KEY) :
                new ObjectParameter("USER_KEY", typeof(System.Guid));
    
            var fK_VehicleParameter = fK_Vehicle.HasValue ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(System.Guid));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetVehicleInOutHistoryDetail_Result>("Report_GetVehicleInOutHistoryDetail", uSER_KEYParameter, fK_VehicleParameter, startingDateParameter, endingDateParameter);
        }
    
        public virtual ObjectResult<Report_GetVehicleLastUpdate_withNearMapLocation_Result> Report_GetVehicleLastUpdate_withNearMapLocation(Nullable<System.Guid> pK_User)
        {
            var pK_UserParameter = pK_User.HasValue ?
                new ObjectParameter("PK_User", pK_User) :
                new ObjectParameter("PK_User", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetVehicleLastUpdate_withNearMapLocation_Result>("Report_GetVehicleLastUpdate_withNearMapLocation", pK_UserParameter);
        }
    
        public virtual ObjectResult<Report_GetVehicleTracking_Result> Report_GetVehicleTracking(Nullable<System.Guid> pK_User)
        {
            var pK_UserParameter = pK_User.HasValue ?
                new ObjectParameter("PK_User", pK_User) :
                new ObjectParameter("PK_User", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetVehicleTracking_Result>("Report_GetVehicleTracking", pK_UserParameter);
        }
    
        public virtual ObjectResult<Report_GetVehicleTrackingByDepo_Result> Report_GetVehicleTrackingByDepo(Nullable<System.Guid> pK_Depo)
        {
            var pK_DepoParameter = pK_Depo.HasValue ?
                new ObjectParameter("PK_Depo", pK_Depo) :
                new ObjectParameter("PK_Depo", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetVehicleTrackingByDepo_Result>("Report_GetVehicleTrackingByDepo", pK_DepoParameter);
        }
    
        public virtual ObjectResult<Report_GetVehicleTrackingByDepoGroup_Result> Report_GetVehicleTrackingByDepoGroup(Nullable<System.Guid> pK_DepoGroup)
        {
            var pK_DepoGroupParameter = pK_DepoGroup.HasValue ?
                new ObjectParameter("PK_DepoGroup", pK_DepoGroup) :
                new ObjectParameter("PK_DepoGroup", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetVehicleTrackingByDepoGroup_Result>("Report_GetVehicleTrackingByDepoGroup", pK_DepoGroupParameter);
        }
    
        public virtual int Report_GetVehicleTrackingForIndividualRequisition(Nullable<System.Guid> pK_IndividualRequisition)
        {
            var pK_IndividualRequisitionParameter = pK_IndividualRequisition.HasValue ?
                new ObjectParameter("PK_IndividualRequisition", pK_IndividualRequisition) :
                new ObjectParameter("PK_IndividualRequisition", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Report_GetVehicleTrackingForIndividualRequisition", pK_IndividualRequisitionParameter);
        }
    
        public virtual ObjectResult<ReportMobile_GetVehicleTracking_Far_Result> ReportMobile_GetVehicleTracking_Far(Nullable<System.Guid> pK_User, string latitude, string longitude)
        {
            var pK_UserParameter = pK_User.HasValue ?
                new ObjectParameter("PK_User", pK_User) :
                new ObjectParameter("PK_User", typeof(System.Guid));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportMobile_GetVehicleTracking_Far_Result>("ReportMobile_GetVehicleTracking_Far", pK_UserParameter, latitudeParameter, longitudeParameter);
        }
    
        public virtual ObjectResult<ReportMobile_GetVehicleTracking_Near_Result> ReportMobile_GetVehicleTracking_Near(Nullable<System.Guid> pK_User, string latitude, string longitude)
        {
            var pK_UserParameter = pK_User.HasValue ?
                new ObjectParameter("PK_User", pK_User) :
                new ObjectParameter("PK_User", typeof(System.Guid));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportMobile_GetVehicleTracking_Near_Result>("ReportMobile_GetVehicleTracking_Near", pK_UserParameter, latitudeParameter, longitudeParameter);
        }
    
        public virtual ObjectResult<ReportMobile_GetVehicleTracking_Single_Result> ReportMobile_GetVehicleTracking_Single(Nullable<System.Guid> pK_Vehicle)
        {
            var pK_VehicleParameter = pK_Vehicle.HasValue ?
                new ObjectParameter("PK_Vehicle", pK_Vehicle) :
                new ObjectParameter("PK_Vehicle", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportMobile_GetVehicleTracking_Single_Result>("ReportMobile_GetVehicleTracking_Single", pK_VehicleParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_JOB_RegularJob()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_JOB_RegularJob");
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Temp_T1_report_Result> Temp_T1_report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Temp_T1_report_Result>("Temp_T1_report");
        }
    
        public virtual ObjectResult<Temp_T366_report_Result> Temp_T366_report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Temp_T366_report_Result>("Temp_T366_report");
        }
    
        public virtual ObjectResult<Temp_VT1_report_Result> Temp_VT1_report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Temp_VT1_report_Result>("Temp_VT1_report");
        }
    
        public virtual ObjectResult<Tracking_GetLastDeviceData_Result> Tracking_GetLastDeviceData(Nullable<System.Guid> fK_Vehicle)
        {
            var fK_VehicleParameter = fK_Vehicle.HasValue ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tracking_GetLastDeviceData_Result>("Tracking_GetLastDeviceData", fK_VehicleParameter);
        }
    
        public virtual ObjectResult<Tracking_GetNextDeviceData_Result> Tracking_GetNextDeviceData(Nullable<System.Guid> fK_Vehicle, Nullable<System.DateTime> previousUpdateTime)
        {
            var fK_VehicleParameter = fK_Vehicle.HasValue ?
                new ObjectParameter("FK_Vehicle", fK_Vehicle) :
                new ObjectParameter("FK_Vehicle", typeof(System.Guid));
    
            var previousUpdateTimeParameter = previousUpdateTime.HasValue ?
                new ObjectParameter("PreviousUpdateTime", previousUpdateTime) :
                new ObjectParameter("PreviousUpdateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tracking_GetNextDeviceData_Result>("Tracking_GetNextDeviceData", fK_VehicleParameter, previousUpdateTimeParameter);
        }
    
        public virtual ObjectResult<string> VehicleTracking_UpdateToGPSLost(Nullable<System.Guid> pK_Vehicle, Nullable<System.DateTime> updateTime)
        {
            var pK_VehicleParameter = pK_Vehicle.HasValue ?
                new ObjectParameter("PK_Vehicle", pK_Vehicle) :
                new ObjectParameter("PK_Vehicle", typeof(System.Guid));
    
            var updateTimeParameter = updateTime.HasValue ?
                new ObjectParameter("UpdateTime", updateTime) :
                new ObjectParameter("UpdateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("VehicleTracking_UpdateToGPSLost", pK_VehicleParameter, updateTimeParameter);
        }
    
        public virtual ObjectResult<string> VehicleTracking_UpdateToGPSRecover(Nullable<System.Guid> pK_Vehicle, Nullable<System.DateTime> updateTime)
        {
            var pK_VehicleParameter = pK_Vehicle.HasValue ?
                new ObjectParameter("PK_Vehicle", pK_Vehicle) :
                new ObjectParameter("PK_Vehicle", typeof(System.Guid));
    
            var updateTimeParameter = updateTime.HasValue ?
                new ObjectParameter("UpdateTime", updateTime) :
                new ObjectParameter("UpdateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("VehicleTracking_UpdateToGPSRecover", pK_VehicleParameter, updateTimeParameter);
        }
    
        public virtual ObjectResult<string> VehicleTracking_UpdateToLowBattery(Nullable<System.Guid> pK_Vehicle, Nullable<System.DateTime> updateTime)
        {
            var pK_VehicleParameter = pK_Vehicle.HasValue ?
                new ObjectParameter("PK_Vehicle", pK_Vehicle) :
                new ObjectParameter("PK_Vehicle", typeof(System.Guid));
    
            var updateTimeParameter = updateTime.HasValue ?
                new ObjectParameter("UpdateTime", updateTime) :
                new ObjectParameter("UpdateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("VehicleTracking_UpdateToLowBattery", pK_VehicleParameter, updateTimeParameter);
        }
    
        public virtual ObjectResult<string> VTS_SIM_VerificationReceive(string simNumber, Nullable<System.DateTime> receivedAt, string receivedMessage, string resIMEI)
        {
            var simNumberParameter = simNumber != null ?
                new ObjectParameter("SimNumber", simNumber) :
                new ObjectParameter("SimNumber", typeof(string));
    
            var receivedAtParameter = receivedAt.HasValue ?
                new ObjectParameter("ReceivedAt", receivedAt) :
                new ObjectParameter("ReceivedAt", typeof(System.DateTime));
    
            var receivedMessageParameter = receivedMessage != null ?
                new ObjectParameter("ReceivedMessage", receivedMessage) :
                new ObjectParameter("ReceivedMessage", typeof(string));
    
            var resIMEIParameter = resIMEI != null ?
                new ObjectParameter("ResIMEI", resIMEI) :
                new ObjectParameter("ResIMEI", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("VTS_SIM_VerificationReceive", simNumberParameter, receivedAtParameter, receivedMessageParameter, resIMEIParameter);
        }
    
        public virtual ObjectResult<string> VTS_SIM_VerificationSend(string simNumber, string appVehicleRegistration, string appVehicleIMEI, Nullable<System.DateTime> sentAt, string sentMessage)
        {
            var simNumberParameter = simNumber != null ?
                new ObjectParameter("SimNumber", simNumber) :
                new ObjectParameter("SimNumber", typeof(string));
    
            var appVehicleRegistrationParameter = appVehicleRegistration != null ?
                new ObjectParameter("AppVehicleRegistration", appVehicleRegistration) :
                new ObjectParameter("AppVehicleRegistration", typeof(string));
    
            var appVehicleIMEIParameter = appVehicleIMEI != null ?
                new ObjectParameter("AppVehicleIMEI", appVehicleIMEI) :
                new ObjectParameter("AppVehicleIMEI", typeof(string));
    
            var sentAtParameter = sentAt.HasValue ?
                new ObjectParameter("SentAt", sentAt) :
                new ObjectParameter("SentAt", typeof(System.DateTime));
    
            var sentMessageParameter = sentMessage != null ?
                new ObjectParameter("SentMessage", sentMessage) :
                new ObjectParameter("SentMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("VTS_SIM_VerificationSend", simNumberParameter, appVehicleRegistrationParameter, appVehicleIMEIParameter, sentAtParameter, sentMessageParameter);
        }
    }
}
