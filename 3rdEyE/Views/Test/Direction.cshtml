<html>
<head>
    <title>Simple Map</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

    <!--<link rel="stylesheet" type="text/css" href="./style.css" />
    <script type="module" src="./index.js"></script>-->
</head>
<body>
    <div id="map" style="height:1000px;"></div>

    <!--
     The `defer` attribute causes the callback to execute after the full HTML
     document has been parsed. For non-blocking uses, avoiding race conditions,
     and consistent behavior across browsers, consider loading using Promises
     with https://www.npmjs.com/package/@googlemaps/js-api-loader.
    -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDVkwHNr_8HlH6zM8-mIOnKxErJKLHEpo0&callback=initMap&v=weekly"
            defer></script>

    <script>
        var map;
        var directionsRenderer;
        var directionsService;
        var stepDisplay;
        var markerArray = [];

        function initMap() {
            // Instantiate a directions service.
            directionsService = new google.maps.DirectionsService();

            // Create a map and center it on Manhattan.
            var manhattan = new google.maps.LatLng(40.7711329, -73.9741874);
            var mapOptions = {
                zoom: 13,
                center: manhattan
            }
            map = new google.maps.Map(document.getElementById('map'), mapOptions);

            // Create a renderer for directions and bind it to the map.
            var rendererOptions = {
                map: map
            }
            directionsRenderer = new google.maps.DirectionsRenderer(rendererOptions)

            // Instantiate an info window to hold step text.
            stepDisplay = new google.maps.InfoWindow();
            calcRoute();
        }

        function calcRoute() {

            // First, clear out any existing markerArray
            // from previous calculations.
            for (i = 0; i < markerArray.length; i++) {
                markerArray[i].setMap(null);
            }

            // Retrieve the start and end locations and create
            // a DirectionsRequest using WALKING directions.
            var start = 'chicago, il';//document.getElementById('start').value;
            var end = 'amarillo, tx';//document.getElementById('end').value;
            var request = {
                origin: start,
                destination: end,
                travelMode: 'DRIVING'
            };

            // Route the directions and pass the response to a
            // function to create markers for each step.
            directionsService.route(request, function (response, status) {
                if (status == "OK") {
                    //var warnings = document.getElementById("warnings_panel");
                    console.log(response.routes[0].warnings);
                    //warnings.innerHTML = "" + response.routes[0].warnings + "";
                    directionsRenderer.setDirections(response);
                    showSteps(response);
                }
            });
        }

        function showSteps(directionResult) {
            // For each step, place a marker, and add the text to the marker's
            // info window. Also attach the marker to an array so we
            // can keep track of it and remove it when calculating new
            // routes.
            var myRoute = directionResult.routes[0].legs[0];

            for (var i = 0; i < myRoute.steps.length; i++) {
                var marker = new google.maps.Marker({
                    position: myRoute.steps[i].start_point,
                    map: map
                });
                attachInstructionText(marker, myRoute.steps[i].instructions);
                markerArray[i] = marker;
            }
        }

        function attachInstructionText(marker, text) {
            google.maps.event.addListener(marker, 'click', function () {
                stepDisplay.setContent(text);
                stepDisplay.open(map, marker);
            });
        }
    </script>
</body>
</html>